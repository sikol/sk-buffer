/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/*
 * Concepts of buffers.
 */

#ifndef SK_BUFFER_BUFFER_HXX_INCLUDED
#define SK_BUFFER_BUFFER_HXX_INCLUDED

#include <algorithm>
#include <cassert>
#include <cstddef>
#include <ranges>
#include <span>
#include <type_traits>

namespace sk {

    /*
     * Utility concept to require a range of a particular type.
     */

    // clang-format off

    template <typename T, typename Value>
    concept range_of = 
        // Identical type is acceptable
        std::is_same_v<std::ranges::range_value_t<T>, Value>
        // If Value is const, then a range of non-const Value is also acceptable.
        or (std::is_const_v<Value> and
            std::same_as<
                typename std::remove_const<std::ranges::range_value_t<T>>::type,
                Value>); 

    template <typename T, typename Value>
    concept contiguous_range_of = 
        std::ranges::contiguous_range<T>
        and range_of<T, Value>;

    /*************************************************************************
     * 
     * Concept of a buffer that holds objects of type Char.
     */
    template<typename Buffer>
    concept basic_buffer = 
        requires() {
            typename Buffer::value_type;
            typename Buffer::const_value_type;
            typename Buffer::size_type;
        };

    template<typename Buffer, typename Char>
    concept basic_buffer_of = basic_buffer<Buffer>
        and std::same_as<typename Buffer::value_type, Char>;
    
    /*************************************************************************
     * 
     * Concept of a buffer that can be read from.
     */
    template<typename Buffer>
    concept readable_buffer =
        basic_buffer<Buffer>
        and requires(Buffer &b,
                 typename Buffer::size_type nbytes,
                 std::span<typename Buffer::value_type> &data) {

            // Copy data out of the buffer.
            { b.read(data) } -> std::same_as<typename Buffer::size_type>;

            // Get the buffer's readable extents.
            { b.readable_ranges() } 
                -> std::same_as<
                    std::vector<
                        std::span<typename Buffer::const_value_type>>>;

            // Remove data from the start of the buffer.
            { b.discard(nbytes) } -> std::same_as<typename Buffer::size_type>;
        };

    template<typename Buffer, typename Char>
    concept readable_buffer_of = readable_buffer<Buffer>
        and std::same_as<typename Buffer::value_type, Char>;

    /*************************************************************************
     * 
     * Concept of a buffer that can be written to.
     */
    template<typename Buffer>
    concept writable_buffer =
        basic_buffer<Buffer>
        and requires(Buffer &b,
                 typename Buffer::size_type nbytes,
                 std::span<std::add_const_t<typename Buffer::value_type>> &data) {

            // Copy data into the buffer.
            { b.write(data) } -> std::same_as<typename Buffer::size_type>;

            // Get the buffer's writable extents.
            { b.writable_ranges() }
                -> std::same_as<
                    std::vector<
                        std::span<typename Buffer::value_type>>>;

            // Mark empty space as readable.
            { b.commit(nbytes) } -> std::same_as<typename Buffer::size_type>;

        };

    template<typename Buffer, typename Char>
    concept writable_buffer_of = writable_buffer<Buffer>
        and std::same_as<typename Buffer::value_type, Char>;

    /*************************************************************************
     * 
     * buffer: concept of a buffer that can be both read from and written to.
     */

    template<typename Buffer>
    concept buffer = 
        readable_buffer<Buffer>
        and writable_buffer<Buffer>;

    template<typename Buffer, typename Char>
    concept buffer_of = buffer<Buffer>
        and readable_buffer_of<Buffer, Char>
        and writable_buffer_of<Buffer, Char>;

    // clang-format on

    /*************************************************************************
     *
     * Buffer utilities.
     */

    // Get the size type of a buffer.
    template <basic_buffer Buffer>
    using buffer_size_t = typename std::remove_reference_t<Buffer>::size_type;

    // Get the value type of a buffer.
    template <basic_buffer Buffer>
    using buffer_value_t = typename std::remove_reference_t<Buffer>::value_type;

    // Get the const value type of a butter.
    template <basic_buffer Buffer>
    using buffer_const_value_t =
        typename std::remove_reference_t<Buffer>::const_value_type;

    /*************************************************************************
     *
     * An extent is a contiguous byte region which I/O can be done
     * directly into or out of.
     */
    template <typename T> concept extent = contiguous_range_of<T, std::byte>;

    /*************************************************************************
     *
     * Buffer utility functions.
     *
     */

    /**
     * buffer_copy(from, to): append all of the data in `from` to `to`, as if
     * calling from.read(buf) then to.write(buf).
     */
    template <typename Char>
    auto buffer_copy(readable_buffer_of<Char> auto const &from,
                     writable_buffer_of<Char> auto &to) {
        for (auto &&range : from.readable_ranges()) {
            to.write(range);
        }
    }

    /**
     * buffer_move(from, to): append all of the data in `from` to `to`, then
     * remove all the data in `from`, as if calling buffer_copy(from, to)
     * followed by from.clear();
     */
    template <readable_buffer From, writable_buffer To>
    auto buffer_move(From &from, To &to) requires std::same_as<
        buffer_value_t<From>, buffer_value_t<To>> {

        for (auto &&range : from.readable_ranges()) {
            to.write(range);
        }

        from.clear();
    }

} // namespace sk

#endif // SK_BUFFER_BUFFER_HXX_INCLUDED
