/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <numeric>
#include <catch.hpp>

#include "sk/buffer/circular_buffer.hxx"

TEST_CASE("circular_buffer writes") {
    // Create a buffer that can hold 4 bytes; internal size is 5.
    sk::circular_buffer<char, 4> buf;

    // Writing 4 bytes should write 4 bytes.
    auto n = buf.write(std::string("test"));
    REQUIRE(n == 4);

    // Read the data back.
    std::string ret(4, 'X');
    buf.read(ret);
    REQUIRE(ret == "test");

    buf.clear();

    // Writing 5 bytes should write 4 bytes.
    n = buf.write(std::string("testx"));
    REQUIRE(n == 4);

    buf.clear();

    // Write a bit at a time.
    n = buf.write(std::string("te"));
    REQUIRE(n == 2);
    n = buf.write(std::string("st"));
    REQUIRE(n == 2);
    n = buf.write(std::string("x"));
    REQUIRE(n == 0);
}

TEST_CASE("circular_buffer reads") {
    sk::circular_buffer<char, 4> buf;

    /*
     * Try repeatedly writing and reading to the buffer with
     * various write sizes.
     */
    for (std::size_t write_size = 1, end = 4; write_size <= end; ++write_size) {

        for (std::size_t pass = 0, npasses = 40; pass < npasses; ++pass) {
            std::string input_string(write_size, 'X');
            std::iota(input_string.begin(), input_string.end(), 'A');

            INFO("write_size=" + std::to_string(write_size) + ", pass=" +
                 std::to_string(pass) + "/" + std::to_string(npasses));

            auto n = buf.write(input_string);
            REQUIRE(n == input_string.size());

            std::string output_string(write_size, 'X');
            n = buf.read(output_string);
            REQUIRE(n == output_string.size());

            REQUIRE(input_string == output_string);
        }
    }

    /*
     * Now do the same but vary the write size each time.
     */
    for (std::size_t pass = 0, npasses = 40; pass < npasses; ++pass) {
        for (std::size_t write_size = 1, end = 4; write_size <= end;
             ++write_size) {

            std::string input_string(write_size, 'X');
            std::iota(input_string.begin(), input_string.end(), 'A');

            INFO("write_size=" + std::to_string(write_size) + ", pass=" +
                 std::to_string(pass) + "/" + std::to_string(npasses));

            auto n = buf.write(input_string);
            REQUIRE(n == input_string.size());

            std::string output_string(write_size, 'X');
            n = buf.read(output_string);
            REQUIRE(n == output_string.size());

            REQUIRE(input_string == output_string);
        }
    }
}
