/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <catch.hpp>

#include "sk/buffer/fixed_buffer.hxx"

TEST_CASE("small fixed_buffer") {
    // Our test subject.
    sk::fixed_buffer<char, 5> buf;

    // Add 5 characters to the buffer, which should fill it up.
    sk::fixed_buffer<char, 5>::size_type n = buf.write(std::string("testx"));
    REQUIRE(n == 5);

    // Now adding more data should fail.
    n = buf.write(std::string(""));
    REQUIRE(n == 0);

    // Read the data we put in the buffer.
    char ret[5];
    n = buf.read(ret);
    REQUIRE(n == 5);
    REQUIRE(std::string(ret, ret + 5) == "testx");

    // Adding data should still fail.
    n = buf.write(std::string(""));
    REQUIRE(n == 0);

    // Reset the buffer.
    buf.reset();

    // Now do the same thing again, to make sure reset() works.

    // Add 5 characters to the buffer, which should fill it up.
    n = buf.write(std::string("testx"));
    REQUIRE(n == 5);

    // Now adding more data should fail.
    n = buf.write(std::string(""));
    REQUIRE(n == 0);

    // Read the data we put in the buffer.
    n = buf.read(ret);
    REQUIRE(n == 5);
    REQUIRE(std::string(ret, ret + 5) == "testx");

    // Adding data should still fail.
    n = buf.write(std::string(""));
    REQUIRE(n == 0);

    // Reset the buffer.
    buf.reset();
}
