/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <ranges>
#include <algorithm>
#include <catch.hpp>

#include "sk/buffer/dynamic_buffer.hxx"

namespace yarrow::test_buffer {

    TEST_CASE("small char buffer") {
        std::string input_string =
            "this is a long test string that will fill several extents";
        sk::dynamic_buffer<char, 3> buf;

        buf.write(input_string);

        std::string output_string(input_string.size(), 'A');
        auto nbytes = buf.read(output_string);
        REQUIRE(nbytes == input_string.size());
        REQUIRE(output_string == input_string);

        nbytes = buf.read(output_string);
        REQUIRE(nbytes == 0);

        // repeat the test to make sure the buffer can handle being emptied
        // then filled again.
        buf.write(input_string);

        nbytes = buf.read(output_string);
        REQUIRE(nbytes == input_string.size());
        REQUIRE(output_string == input_string);

        nbytes = buf.read(output_string);
        REQUIRE(nbytes == 0);

        // now read a few bytes at a time
        buf.write(input_string);

        output_string.resize(0);

        for (;;) {
            char data[3];
            nbytes = buf.read(data);
            if (nbytes == 0)
                break;
            output_string.append(data, data + nbytes);
        }

        REQUIRE(output_string == input_string);
        nbytes = buf.read(output_string);
        REQUIRE(nbytes == 0);
    }

    TEST_CASE("small char buffer, commit/discard") {
        std::string input_string =
            "this is a long test string that will fill several extents";
        sk::dynamic_buffer<char, 3> buf;

        // Write into the buffer.
        std::span<char const> inbuf(input_string);
        while (inbuf.size() > 0) {
            auto writable_ranges = buf.writable_ranges();

            for (auto &&range : writable_ranges) {
                if (inbuf.size() == 0)
                    break;

                auto can_write = std::min(range.size(), inbuf.size());
                std::ranges::copy(inbuf.subspan(0, can_write),
                                  std::ranges::begin(range));
                buf.commit(can_write);
                inbuf = inbuf.subspan(can_write);
            }
        }

        // Read the buffer into the output string.
        std::string output_string(input_string.size(), 'A');
        std::span<char> outbuf(output_string);

        while (outbuf.size() > 0) {
            auto readable_ranges = buf.readable_ranges();

            for (auto &&range : readable_ranges) {
                if (outbuf.size() == 0)
                    break;

                auto can_read = std::min(range.size(), outbuf.size());
                std::ranges::copy(range.subspan(0, can_read),
                                  std::ranges::begin(outbuf));
                buf.discard(can_read);
                outbuf = outbuf.subspan(can_read);
            }
        }

        REQUIRE(output_string == input_string);

        auto nbytes = buf.read(output_string);
        REQUIRE(nbytes == 0);
    }

    TEST_CASE("small char buffer, single-byte writes") {
        std::string input_string =
            "this is a long test string that will fill several extents";
        sk::dynamic_buffer<char, 3> buf;

        for (char const &c : input_string)
            buf.write(std::span<char const>{ &c, 1u });

        std::string output_string(input_string.size(), 'A');
        auto nbytes = buf.read(output_string);
        REQUIRE(nbytes == input_string.size());
        REQUIRE(output_string == input_string);

        nbytes = buf.read(output_string);
        REQUIRE(nbytes == 0);
    }

    TEST_CASE("small char buffer, two-byte writes") {
        std::string input_string =
            "this is a long test string that will fill several extents";
        sk::dynamic_buffer<char, 3> buf;

        for (auto it = input_string.begin(), end = input_string.end();
             it != end;) {

            if ((it + 1) == end) {
                buf.write(std::span<char const>{ it, end });
                break;
            }

            buf.write(std::span<char const>{ it, it + 2 });
            it += 2;
        }

        std::string output_string(input_string.size(), 'A');
        auto nbytes = buf.read(output_string);
        REQUIRE(nbytes == input_string.size());
        REQUIRE(output_string == input_string);

        nbytes = buf.read(output_string);
        REQUIRE(nbytes == 0);
    }

    TEST_CASE("large char buffer") {
        std::string input_string =
            "this is a test string that will not fill more than one extent";
        sk::dynamic_buffer<char, 4096> buf;

        buf.write(input_string);

        std::string output_string(input_string.size(), 'A');
        auto nbytes = buf.read(output_string);
        REQUIRE(nbytes == input_string.size());
        REQUIRE(output_string == input_string);

        nbytes = buf.read(output_string);
        REQUIRE(nbytes == 0);

        // repeat the test to make sure the buffer can handle being emptied
        // then filled again.
        buf.write(input_string);

        nbytes = buf.read(output_string);
        REQUIRE(nbytes == input_string.size());
        REQUIRE(output_string == input_string);

        nbytes = buf.read(output_string);
        REQUIRE(nbytes == 0);

        // now read a few bytes at a time
        buf.write(input_string);

        output_string.resize(0);

        for (;;) {
            char data[3];
            nbytes = buf.read(data);
            if (nbytes == 0)
                break;
            output_string.append(data, data + nbytes);
        }

        REQUIRE(output_string == input_string);
        nbytes = buf.read(output_string);
        REQUIRE(nbytes == 0);
    }

    TEST_CASE("large char buffer, commit/discard") {
        std::string input_string =
            "this is a test string that will not fill more than one extent";
        sk::dynamic_buffer<char, 4096> buf;

        // Write into the buffer.
        std::span<char const> inbuf(input_string);
        while (inbuf.size() > 0) {
            auto writable_ranges = buf.writable_ranges();

            for (auto &&range : writable_ranges) {
                if (inbuf.size() == 0)
                    break;

                auto can_write = std::min(range.size(), inbuf.size());
                std::ranges::copy(inbuf.subspan(0, can_write),
                                  std::ranges::begin(range));
                buf.commit(can_write);
                inbuf = inbuf.subspan(can_write);
            }
        }

        // Read the buffer into the output string.
        std::string output_string(input_string.size(), 'A');
        std::span<char> outbuf(output_string);

        while (outbuf.size() > 0) {
            auto readable_ranges = buf.readable_ranges();

            for (auto &&range : readable_ranges) {
                if (outbuf.size() == 0)
                    break;

                auto can_read = std::min(range.size(), outbuf.size());
                std::ranges::copy(range.subspan(0, can_read),
                                  std::ranges::begin(outbuf));
                buf.discard(can_read);
                outbuf = outbuf.subspan(can_read);
            }
        }

        REQUIRE(output_string == input_string);

        auto nbytes = buf.read(output_string);
        REQUIRE(nbytes == 0);
    }

    TEST_CASE("small buffer discard") {
        std::string input_string =
            "this is a long test string that will fill several extents";
        sk::dynamic_buffer<char, 3> buf;

        buf.write(input_string);
        buf.discard(7);

        std::string output_string(input_string.size() - 7, 'A');
        auto nbytes = buf.read(output_string);
        REQUIRE(nbytes == (input_string.size() - 7));
        REQUIRE(output_string == input_string.substr(7));

        nbytes = buf.read(output_string);
        REQUIRE(nbytes == 0);
    }

    TEST_CASE("large buffer discard") {
        std::string input_string =
            "this is a test string that will not fill more than one extent";
        sk::dynamic_buffer<char, 4096> buf;

        buf.write(input_string);
        buf.discard(7);

        std::string output_string(input_string.size() - 7, 'A');
        auto nbytes = buf.read(output_string);
        REQUIRE(nbytes == (input_string.size() - 7));
        REQUIRE(output_string == input_string.substr(7));

        nbytes = buf.read(output_string);
        REQUIRE(nbytes == 0);
    }

} // namespace yarrow::test_buffer